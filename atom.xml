<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhang&#39;s Blog</title>
  
  <subtitle>尽人事 知天命</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jason.phewww.club/"/>
  <updated>2019-02-21T09:08:34.953Z</updated>
  <id>http://jason.phewww.club/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac下jdk环境变量的配置</title>
    <link href="http://jason.phewww.club/2019/02/21/Mac%E4%B8%8Bjdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://jason.phewww.club/2019/02/21/Mac下jdk环境变量的配置/</id>
    <published>2019-02-21T07:54:00.000Z</published>
    <updated>2019-02-21T09:08:34.953Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载jdk： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle官网下载地址 </a>下载JDK1.8并安装</p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img1.png" alt="img1.png"></p><p>2.一路默认选项安装完成后，打开终端检查安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /usr/bin/java</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img2.png" alt="img2.png"></p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img3.png" alt="img3.png"></p><p>3.配置Java环境变量<br><br>（1）输入sudo vim /etc/profile，回车，输入密码（不显示密码只管输入后回车就好）。</p><p>（2）如果出现E325警告。输入E，edit anyway，回车。</p><p>（3）按下i，显示insert，进入输入模式。</p><p>（4）文件尾部添加Java路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">⚠️⚠️⚠️这是你的路径，此处以jdk1.8.0_121.jdk为例 </span><br><span class="line"></span><br><span class="line">JAVA_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home&quot;</span><br><span class="line">CLASS_HOME=&quot;$JAVA_HOME/lib&quot;PATH=&quot;.;$PATH:$JAVA_HOME/bin&quot;</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></p><p>(5)编辑好后，点击esc，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></table></figure></p><p>退出编辑。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img4.png" alt="img4.png"><br>（6）要想马上生效，输入source /etc/profile。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img5.png" alt="img5.png"><br>（7）检查环境。输入echo $JAVA_HOME。配置完毕。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img6.png" alt="img6.png"></p><h5 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.下载jdk： &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Or
      
    
    </summary>
    
      <category term="环境配置" scheme="http://jason.phewww.club/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mac" scheme="http://jason.phewww.club/tags/Mac/"/>
    
      <category term="jdk" scheme="http://jason.phewww.club/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title> 用Lambda表达式快速地处理集合</title>
    <link href="http://jason.phewww.club/2019/01/24/%E7%94%A8Lambda%E5%BF%AB%E9%80%9F%E5%9C%B0%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/"/>
    <id>http://jason.phewww.club/2019/01/24/用Lambda快速地处理集合/</id>
    <published>2019-01-24T02:34:00.000Z</published>
    <updated>2019-02-04T03:19:43.972Z</updated>
    
    <content type="html"><![CDATA[<h5 id="for-循环不是挺好的吗"><a href="#for-循环不是挺好的吗" class="headerlink" title="for 循环不是挺好的吗"></a>for 循环不是挺好的吗</h5><p>在 Java 的第 1 个版本中就开始引入了传统的 for 循环，它的更简单的变体 for-each 是在 Java 5 中引入的。大部分开发人员更喜欢使用 for-each 执行日常迭代，但对于迭代一个范围或跳过范围中的值等操作，仍会使用 for循环。</p><h5 id="for-循环非常强大，但它包含太多可变部分。"><a href="#for-循环非常强大，但它包含太多可变部分。" class="headerlink" title="for 循环非常强大，但它包含太多可变部分。"></a>for 循环非常强大，但它包含太多可变部分。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 1; i &lt; 6; i++) &#123;</span><br><span class="line">  System.out.print(i + &quot;starts&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有太多代码，但比较繁琐。Java 8 提供了一种更简单、更优雅的替代方法：Lambda表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(1, 6)</span><br><span class="line">  .forEach(i -&gt; System.out.print(i + &quot;starts&quot;));</span><br></pre></td></tr></table></figure></p><p>并没有显著减少代码量，但降低了它的复杂性。这样做有两个重要原因：</p><h6 id="1-不同于-for，range不会强迫我们初始化某个可变变量。"><a href="#1-不同于-for，range不会强迫我们初始化某个可变变量。" class="headerlink" title="1.不同于 for，range不会强迫我们初始化某个可变变量。"></a>1.不同于 for，range不会强迫我们初始化某个可变变量。<br></h6><h6 id="2-迭代会自动执行，所以不需要像循环索引一样定义增量。"><a href="#2-迭代会自动执行，所以不需要像循环索引一样定义增量。" class="headerlink" title="2.迭代会自动执行，所以不需要像循环索引一样定义增量。"></a>2.迭代会自动执行，所以不需要像循环索引一样定义增量。</h6><h5 id="开始使用Lambda"><a href="#开始使用Lambda" class="headerlink" title="开始使用Lambda"></a>开始使用Lambda</h5><p>首先我们先创建一个 Car 泛型的 List<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = new ArrayList&lt;&gt;();</span><br><span class="line">cars.add(new Car(&quot;Benz&quot;,&quot;G63&quot;,&quot;black&quot;));</span><br><span class="line">cars.add(new Car(&quot;Audi&quot;,&quot;RS6&quot;,&quot;blue&quot;));</span><br><span class="line">cars.add(new Car(&quot;Mitsubishi&quot;,&quot;EVOIIV&quot;,&quot;white&quot;));</span><br></pre></td></tr></table></figure></p><p>Car 类包含品牌、型号和颜色3个属性</p><h6 id="1-stream"><a href="#1-stream" class="headerlink" title="1. stream()"></a>1. stream()</h6><p>将集合转换为流</p><h6 id="2-filter-T-gt-boolean"><a href="#2-filter-T-gt-boolean" class="headerlink" title="2. filter(T -&gt; boolean)"></a>2. filter(T -&gt; boolean)</h6><p>保留 boolean 为 true 的元素<br><br> <strong>举个栗子</strong><br><br> 保留品牌为Mitsubishi的Car元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = cars.stream()</span><br><span class="line">            .filter(Car -&gt;Car.getBrand().equals(&quot;Mitsubishi&quot;))</span><br><span class="line">            .collect(toList()); //把流转换为 List 类型</span><br></pre></td></tr></table></figure></p><h6 id="3-distinct"><a href="#3-distinct" class="headerlink" title="3. distinct()"></a>3. distinct()</h6><p>去除重复元素，通过类的 equals 方法来判断两个元素是否相等</p><h6 id="4-sorted-sorted-T-T-gt-int"><a href="#4-sorted-sorted-T-T-gt-int" class="headerlink" title="4. sorted() / sorted((T, T) -&gt; int)"></a>4. sorted() / sorted((T, T) -&gt; int)</h6><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序</p><h6 id="5-limit-long-n"><a href="#5-limit-long-n" class="headerlink" title="5. limit(long n)"></a>5. limit(long n)</h6><p>返回前 n 个元素</p><h6 id="6-skip-long-n"><a href="#6-skip-long-n" class="headerlink" title="6. skip(long n)"></a>6. skip(long n)</h6><p>去除前 n 个元素</p><h6 id="7-map-T-gt-R"><a href="#7-map-T-gt-R" class="headerlink" title="7. map(T -&gt; R)"></a>7. map(T -&gt; R)</h6><p>将流中的每一个元素 T 映射为 R（类似类型转换）</p><h6 id="8-flatMap-T-gt-Stream"><a href="#8-flatMap-T-gt-Stream" class="headerlink" title="8. flatMap(T -&gt; Stream"></a>8. flatMap(T -&gt; Stream</h6><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流</p><h6 id="9-anyMatch-T-gt-boolean"><a href="#9-anyMatch-T-gt-boolean" class="headerlink" title="9. anyMatch(T -&gt; boolean)"></a>9. anyMatch(T -&gt; boolean)</h6><p>流中是否有一个元素匹配给定的 T -&gt; boolean 条件</p><h6 id="10-allMatch-T-gt-boolean"><a href="#10-allMatch-T-gt-boolean" class="headerlink" title="10. allMatch(T -&gt; boolean)"></a>10. allMatch(T -&gt; boolean)</h6><p>流中是否所有元素都匹配给定的 T -&gt; boolean 条件</p><h6 id="11-noneMatch-T-gt-boolean"><a href="#11-noneMatch-T-gt-boolean" class="headerlink" title="11. noneMatch(T -&gt; boolean)"></a>11. noneMatch(T -&gt; boolean)</h6><p>流中是否没有元素匹配给定的 T -&gt; boolean 条件</p><h6 id="12-findAny-和-findFirst"><a href="#12-findAny-和-findFirst" class="headerlink" title="12. findAny() 和 findFirst()"></a>12. findAny() 和 findFirst()</h6><p>findAny()：找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）<br>findFirst()：找到第一个元素</p><h6 id="13-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T"><a href="#13-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T" class="headerlink" title="13. reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)"></a>13. reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)</h6><p>用于组合流中的元素，如求和，求积，求最大值等</p><h6 id="13-count"><a href="#13-count" class="headerlink" title="13. count()"></a>13. count()</h6><p>返回流中元素个数，结果为 long 类型</p><h6 id="14-collect"><a href="#14-collect" class="headerlink" title="14. collect()"></a>14. collect()</h6><p>收集方法，常用的是 collect(toList())，当然还有 collect(toSet()) 等，参数是一个收集器接口</p><h6 id="15-forEach"><a href="#15-forEach" class="headerlink" title="15. forEach()"></a>15. forEach()</h6><p>遍历集合<br></p><h5 id="多层循环怎么处理"><a href="#多层循环怎么处理" class="headerlink" title="多层循环怎么处理"></a>多层循环怎么处理</h5><p><strong>举个稍复杂的栗子</strong></p><p>给汽车装上轮子，要求颜色一样，而且轮子能转</p><p>先来看for 循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars = new ArrayList&lt;&gt;(); </span><br><span class="line">    for (Car car : cars) &#123; </span><br><span class="line">     for (Wheel wheel : wheels) &#123; </span><br><span class="line">      if (car.getColor() == wheel.getColor() &amp;&amp; </span><br><span class="line">        wheel.isWorking() == true) &#123; </span><br><span class="line">       filteredCars.add(car); </span><br><span class="line">       break; </span><br><span class="line">      &#125; </span><br><span class="line">     &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return filteredCars;</span><br></pre></td></tr></table></figure></p><p>再来看Lambda表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars = cars.stream() </span><br><span class="line">                    .filter (car -&gt; wheels.stream() </span><br><span class="line">                    .anyMatch(wheel -&gt; wheel.getColor() == car.getColor() &amp;&amp;  wheel.isWorking())) </span><br><span class="line">                    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><h5 id="真好。"><a href="#真好。" class="headerlink" title="真好。"></a>真好。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;for-循环不是挺好的吗&quot;&gt;&lt;a href=&quot;#for-循环不是挺好的吗&quot; class=&quot;headerlink&quot; title=&quot;for 循环不是挺好的吗&quot;&gt;&lt;/a&gt;for 循环不是挺好的吗&lt;/h5&gt;&lt;p&gt;在 Java 的第 1 个版本中就开始引入了传统的 for 
      
    
    </summary>
    
      <category term="编程" scheme="http://jason.phewww.club/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://jason.phewww.club/tags/java/"/>
    
      <category term="for循环" scheme="http://jason.phewww.club/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="lambda表达式" scheme="http://jason.phewww.club/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo-admin插件管理Hexo博客</title>
    <link href="http://jason.phewww.club/2019/01/10/%E5%88%A9%E7%94%A8Hexo-admin%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jason.phewww.club/2019/01/10/利用Hexo-admin插件管理Hexo博客/</id>
    <published>2019-01-10T10:02:00.000Z</published>
    <updated>2019-02-04T03:19:43.968Z</updated>
    
    <content type="html"><![CDATA[<p>成功用github+hexo搭建好个人博客之后，找一个自己喜欢的主题运用到自己的博客中：</p><h5 id="挑个好看的主题"><a href="#挑个好看的主题" class="headerlink" title="挑个好看的主题"></a>挑个好看的主题</h5><p>在网上能找到很多好看的主题供你下载。</p><p>知乎话题：<a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a></p><p>也可以去hexo下载官方主题。</p><h5 id="下载主题到本地"><a href="#下载主题到本地" class="headerlink" title="下载主题到本地"></a>下载主题到本地</h5><p> 选一个，比如NEXT主题，<br> <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img2.png" alt="img2.png"><br> 复制该主题的URL<br><br> 用git bash，进入到博客的本地目录中,<br> <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img1.png" alt="img1.png"><br> 使用clone 命令将主题拉取到本地：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next.</span><br></pre></td></tr></table></figure></p><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>  打开当前目录下的“_config.yml”配置文件。</p><h5 id="更多可选配置"><a href="#更多可选配置" class="headerlink" title="更多可选配置"></a>更多可选配置</h5><p> NEXT官方主题：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">使用文档</a></p><p>  找到theme的配置选项，一般在文件的最后。之后，将theme选项配置为我们新下载好的next主题即可。<br>   <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img3.png" alt="img3.png"><br>   注意YML文件的格式，<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:</span><br></pre></td></tr></table></figure></p><p>   后面有空格！</p><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>   回到git bash，输入调试命令：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --debug</span><br></pre></td></tr></table></figure></p><p>   在浏览器中输入localhost:4000查看，<br>   <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img4.png" alt="img4.png"></p><h6 id="正常！"><a href="#正常！" class="headerlink" title="正常！"></a>正常！</h6><h5 id="安装Hexo-admin插件"><a href="#安装Hexo-admin插件" class="headerlink" title="安装Hexo-admin插件"></a>安装Hexo-admin插件</h5><p>   运行<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$npm install --save hexo-admin</span><br><span class="line">$hexo server -d</span><br></pre></td></tr></table></figure></p><p>   安装完后在浏览器中输入localhost:4000/admin查看<br>      <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img5.png" alt="img5.png"></p><p> Post：博客文章列表<br> Pages：页面管理<br>About：admin插件说明<br> hexo-gen：关键节点<br>Settings: 配置</p><p>在post页面就可以使用MarkDown语法写博客了。当然，多媒体文件的插入也完全遵循MarkDown语法。<br><br>关于MarkDown语法的使用：<a href="https://blog.csdn.net/m0_37925202/article/details/80461714" target="_blank" rel="noopener">MarkDown语法进阶</a></p><h5 id="最后，本地写完后不要忘记提交"><a href="#最后，本地写完后不要忘记提交" class="headerlink" title="最后，本地写完后不要忘记提交"></a>最后，本地写完后不要忘记提交</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;成功用github+hexo搭建好个人博客之后，找一个自己喜欢的主题运用到自己的博客中：&lt;/p&gt;
&lt;h5 id=&quot;挑个好看的主题&quot;&gt;&lt;a href=&quot;#挑个好看的主题&quot; class=&quot;headerlink&quot; title=&quot;挑个好看的主题&quot;&gt;&lt;/a&gt;挑个好看的主题&lt;/h5&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="http://jason.phewww.club/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hexo-admin" scheme="http://jason.phewww.club/tags/Hexo-admin/"/>
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建自己的博客</title>
    <link href="http://jason.phewww.club/2019/01/06/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jason.phewww.club/2019/01/06/用Github-Hexo搭建自己的博客/</id>
    <published>2019-01-06T08:03:00.000Z</published>
    <updated>2019-02-04T03:19:43.970Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：<br></h5><p>1.安装Git：下载地址 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br></p><p>2.下载Node.js安装文件（64位的下载地址）：<a href="https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi</a><br></p><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：<br></h5><p>点开安装包，默认选项，一路next。</p><h5 id="检查git版本号"><a href="#检查git版本号" class="headerlink" title="检查git版本号:"></a>检查git版本号:<br></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;git --version</span><br><span class="line">git version 2.20.1.windows.1</span><br></pre></td></tr></table></figure><h5 id="检查node-js版本号"><a href="#检查node-js版本号" class="headerlink" title="检查node.js版本号:"></a>检查node.js版本号:<br></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;node -v</span><br><span class="line">v10.13.0</span><br></pre></td></tr></table></figure><h5 id="检查npm的安装"><a href="#检查npm的安装" class="headerlink" title="检查npm的安装:"></a>检查npm的安装:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;npm -v</span><br><span class="line">3.10.10</span><br></pre></td></tr></table></figure><p>都没问题后，<br>到Github上注册一个账号:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br><br>注册完成后，登录你的账号，创建一个新仓库,仓库名称要与你的用户名一致<br></p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img5.png" alt="img5.png"></p><p>其它选项默认，点击Create repository 创建仓库。<br><br>创建好仓库后，在本地磁盘创建一个文件夹，比如我的叫zpc9360</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img6.png" alt="img6.png"></p><p>右键文件夹，点Git Bash ,进入：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img7.png" alt="img7.png"></p><p>然后，设置全局配置user.name 和user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;自己的Github的账号&quot;   </span><br><span class="line">git config --global user.email &quot;注册Github时的邮箱&quot;</span><br></pre></td></tr></table></figure></p><p>生成SSH密钥设置到Github(需先设置user.name和user.email)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh </span><br><span class="line">ssh-keygen -t rsa -C “注册Github时的邮箱”</span><br></pre></td></tr></table></figure></p><p>生成的ssh key在C:\Users\chenc\.ssh文件夹中，复制 id_rsa.pub文件的内容到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key </p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img8.png" alt="img8.png"></p><p>完成后测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>连接成功</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img9.png" alt="img9.png"></p><h5 id="接下来安装hexo插件"><a href="#接下来安装hexo插件" class="headerlink" title="接下来安装hexo插件"></a>接下来安装hexo插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g #安装hexo</span><br></pre></td></tr></table></figure><p>稍安勿躁，等待安装完成。</p><p>安完后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Hexo #初始化hexo</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #构建</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo sever #启动服务</span><br></pre></td></tr></table></figure><p>上面两个命令可以简写为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p><h5 id="好了，初步搭建完成"><a href="#好了，初步搭建完成" class="headerlink" title="好了，初步搭建完成"></a>好了，初步搭建完成</h5><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 访问本地项目</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img10.png" alt="img10.png"></p><h5 id="但是现在只能本地访问，我们要把它提交到GitHub上去"><a href="#但是现在只能本地访问，我们要把它提交到GitHub上去" class="headerlink" title="但是现在只能本地访问，我们要把它提交到GitHub上去"></a>但是现在只能本地访问，我们要把它提交到GitHub上去</h5><p>安装部署到github插件依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install –save hexo-deployer-git</span><br></pre></td></tr></table></figure></p><p>顺便修改下配置文件：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img11.png" alt="img11.png"></p><p>改成你的：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img12.png" alt="img12.png"></p><p>再将gitbash部署hexo到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>稍等，打开zpc9360.github.io（你输入你自己的！当然你可以映射到你自己的域名上）,会出现博客界面：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img10.png" alt="img10.png"></p><h5 id="你的博客就搭好啦！"><a href="#你的博客就搭好啦！" class="headerlink" title="你的博客就搭好啦！"></a>你的博客就搭好啦！</h5><p>但是，如何优雅的发布文章呢？怎样编辑分类和标签，加入评论模块？</p><p>模板太丑怎么换？ 怎么插入图片和多媒体文件？</p><p>且听下回，《利用Hexo-admin插件管理Hexo博客》。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;下载：&quot;&gt;&lt;a href=&quot;#下载：&quot; class=&quot;headerlink&quot; title=&quot;下载：&quot;&gt;&lt;/a&gt;下载：&lt;br&gt;&lt;/h5&gt;&lt;p&gt;1.安装Git：下载地址 &lt;a href=&quot;https://git-scm.com/download/win&quot; target
      
    
    </summary>
    
      <category term="编程" scheme="http://jason.phewww.club/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="http://jason.phewww.club/tags/Github/"/>
    
      <category term="Hexo" scheme="http://jason.phewww.club/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>再见2018</title>
    <link href="http://jason.phewww.club/2018/12/30/%E5%86%8D%E8%A7%812018/"/>
    <id>http://jason.phewww.club/2018/12/30/再见2018/</id>
    <published>2018-12-30T10:16:00.000Z</published>
    <updated>2019-02-04T03:19:43.968Z</updated>
    
    <content type="html"><![CDATA[<p>今天是元旦假期的的第一天，2018的最后两天。<br><br>能睡到自然醒真好。<br><br>杭州今天也下雪了，终于有点冬天的感觉了。<br><br>回顾过去的2018年，给自己总结了这么几个词：<br><br>浮躁、惭愧、情商低。<br><br>情商低不是那种得罪人的低，还没有那么低。<br><br>希望别人开心，逗人笑，反而做了很多沙雕的事。<br><br>幸好周围的人足够宽容，忽略了那种刻意。<br><br>说起来惭愧。<br><br>希望2019年<br><br>戒骄戒躁，对生活抱有热情。<br><br>大可不必在意，大可不必担心<br><br>高高兴兴 开开心心<br><br>朋友们！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是元旦假期的的第一天，2018的最后两天。&lt;br&gt;&lt;br&gt;能睡到自然醒真好。&lt;br&gt;&lt;br&gt;杭州今天也下雪了，终于有点冬天的感觉了。&lt;br&gt;&lt;br&gt;回顾过去的2018年，给自己总结了这么几个词：&lt;br&gt;&lt;br&gt;浮躁、惭愧、情商低。&lt;br&gt;&lt;br&gt;情商低不是那种得罪人的低
      
    
    </summary>
    
      <category term="高高兴兴 开开心心" scheme="http://jason.phewww.club/categories/%E9%AB%98%E9%AB%98%E5%85%B4%E5%85%B4-%E5%BC%80%E5%BC%80%E5%BF%83%E5%BF%83/"/>
    
    
      <category term="再见" scheme="http://jason.phewww.club/tags/%E5%86%8D%E8%A7%81/"/>
    
      <category term="惭愧" scheme="http://jason.phewww.club/tags/%E6%83%AD%E6%84%A7/"/>
    
  </entry>
  
</feed>
