<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhang&#39;s Blog</title>
  
  <subtitle>尽人事 知天命</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://phewww.top/"/>
  <updated>2019-05-28T09:37:38.606Z</updated>
  <id>http://phewww.top/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LetsEat·外卖点餐APP</title>
    <link href="http://phewww.top/2019/05/28/LetsEat%C2%B7%E5%A4%96%E5%8D%96%E7%82%B9%E9%A4%90APP/"/>
    <id>http://phewww.top/2019/05/28/LetsEat·外卖点餐APP/</id>
    <published>2019-05-28T07:28:00.000Z</published>
    <updated>2019-05-28T09:37:38.606Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>LetsEat外卖点餐小程序，是以Spring Boot和微信特性为核心技术栈，实现一个从下单到接单流程完整，包含买家端和卖家端前后台功能的微信点餐系统。</p><h4 id="基本思路："><a href="#基本思路：" class="headerlink" title="基本思路："></a>基本思路：<br></h4><p>1.项目设计 包括需求分析，项目设计，项目架构，数据库设计<br><br>2.项目起步 开发环境的搭建，日志的使用和配置。<br><br>3.建立数据库 建立表结构。<br><br>4.用Spring JPA 建立数据持久层 建立实体类。<br><br>5.买家端开发 包括分类、商品类、买家订单、支付功能相关。<br><br>6.申请微信小程序 微信测试号接入。 <br><br>7.卖家端开发 （1）卖家端订单模块的开发包括订单管理、支付状态管理<br><br>8.卖家端开发 （2）卖家端新增商品、类目物品上下架管理。<br><br>9.项目测试 项目模块化测试。<br><br>10.项目部署 项目编译打包部署。<br></p><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p>开发环境：Windows 10 + IntelliJ IDEA 2018.2 + Maven 3.5.4+ JDK1.8<br><br>项目框架：Spring Boot + Vue.js<br><br>服务器： Tomcat  + nginx <br><br>平台：Web / 微信测试号 <br><br>数据库：MySQL 8.0 <br></p><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><p>WeChat：zpc9360</p><h4 id="项目演示"><a href="#项目演示" class="headerlink" title="项目演示"></a>项目演示</h4><p><img src="/2019/05/28/LetsEat·外卖点餐APP/使用微信扫描二维码.png" alt="使用微信扫描二维码.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h4&gt;&lt;p&gt;LetsEat外卖点餐小程序，是以Spring Boot和微信特性为核心技术栈，实现一个从下单到接单流程完整，包含买家端和卖
      
    
    </summary>
    
      <category term="编程" scheme="http://phewww.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring Boot" scheme="http://phewww.top/tags/Spring-Boot/"/>
    
      <category term="Java" scheme="http://phewww.top/tags/Java/"/>
    
      <category term="Vue" scheme="http://phewww.top/tags/Vue/"/>
    
      <category term="微信" scheme="http://phewww.top/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>五月·毕业·工作</title>
    <link href="http://phewww.top/2019/05/17/%E4%BA%94%E6%9C%88-%E6%AF%95%E4%B8%9A/"/>
    <id>http://phewww.top/2019/05/17/五月-毕业/</id>
    <published>2019-05-17T03:29:00.000Z</published>
    <updated>2019-05-17T09:11:05.635Z</updated>
    
    <content type="html"><![CDATA[<p>五月注定是忙碌的月份。<br><br>趁着劳动节的4天假期，和组长请了一周的假。回学校准备毕业的事情。<br>二号晚上下了飞机，呼市的天气还没有回暖，一件套头衫根本加持不住。<br>老李去机场接机，一路上还说，真快啊，这就毕业了。<br>回了趟老家，下午又赶回学校填了实习考核表，交了打印好的论文和实习报告。<br>班里一起照了毕业照，到处取景拍照，才发现自己待了四年的校园，没有这样仔细的看过。<br>晚上大家一起聚餐，席间话不多。<br>十号飞飞结婚，大日子。正席的时候手机收到公司转正的通知，可以留下。<br>十二号晚上的飞机回杭州，可能是不想回去，高高兴兴的就错过了值机时间。无奈只好改签十三号。<br>回来才发现，当初一起来实习的大批实习生，留下的寥寥无几。<br>组里以前经常带我们的超哥，五一以后也要离职了。<br>旁边十几个人的项目组，节后就剩下四个人，下周还要陆续离职。<br>我想，在一个地方工作，无非只有三个原因。<br>你周围共事的人，你所从事的工作内容，你得到的薪资报酬。<br>如果其中有两项达不到心里的预期，那就是时候该离开了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;五月注定是忙碌的月份。&lt;br&gt;&lt;br&gt;趁着劳动节的4天假期，和组长请了一周的假。回学校准备毕业的事情。&lt;br&gt;二号晚上下了飞机，呼市的天气还没有回暖，一件套头衫根本加持不住。&lt;br&gt;老李去机场接机，一路上还说，真快啊，这就毕业了。&lt;br&gt;回了趟老家，下午又赶回学校填了实习考
      
    
    </summary>
    
      <category term="写在毕业" scheme="http://phewww.top/categories/%E5%86%99%E5%9C%A8%E6%AF%95%E4%B8%9A/"/>
    
    
      <category term="毕业" scheme="http://phewww.top/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="工作" scheme="http://phewww.top/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>送你一本《银河系漫游指南》 📖Web全栈技术（转载）</title>
    <link href="http://phewww.top/2019/03/29/%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%AC%E9%93%B6%E6%B2%B3%E7%B3%BB%E6%BC%AB%E6%B8%B8%E6%8C%87%E5%8D%97-%F0%9F%91%89Web%E5%85%A8%E6%A0%88%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>http://phewww.top/2019/03/29/送你一本银河系漫游指南-👉Web全栈技术指南（转载）/</id>
    <published>2019-03-29T02:36:38.000Z</published>
    <updated>2019-03-29T03:00:12.219Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“本书试图绘制一张技术地图，让你看清Web开发的全貌，同时它还有足够的细节让你找到通往目标的路径。当然，无论怎样，仅凭一张地图是到不了目的地的，你得靠自己的双脚走过去。”<br></p></blockquote><h3 id="🚀原文传送门"><a href="#🚀原文传送门" class="headerlink" title="🚀原文传送门"></a><center>🚀<a href="https://getfullstack.com/" target="_blank" rel="noopener">原文传送门</a></center></h3><h3 id="📌PDF下载1"><a href="#📌PDF下载1" class="headerlink" title="📌PDF下载1"></a><center>📌<a href="https://legacy.gitbook.com/book/coin8086/getfullstack/details" target="_blank" rel="noopener">PDF下载1</a></center></h3><h3 id="🧷PDF下载2"><a href="#🧷PDF下载2" class="headerlink" title="🧷PDF下载2"></a><center>🧷<a href="https://pan.baidu.com/s/1bBGAAjhfM1Wcbn04Ck3zsQ" target="_blank" rel="noopener">PDF下载2</a></center></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;“本书试图绘制一张技术地图，让你看清Web开发的全貌，同时它还有足够的细节让你找到通往目标的路径。当然，无论怎样，仅凭一张地图是到不了目的地的，你得靠自己的双脚走过去。”&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;🚀原文传送门&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用burpsuite爆破密文密码</title>
    <link href="http://phewww.top/2019/03/18/%E5%88%A9%E7%94%A8burpsuite%E7%88%86%E7%A0%B4%E5%AF%86%E6%96%87%E5%AF%86%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://phewww.top/2019/03/18/利用burpsuite爆破密文密码（一）/</id>
    <published>2019-03-18T06:25:00.000Z</published>
    <updated>2019-05-17T03:25:06.302Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>宿舍的WiFi实在是太慢了，打个网页都要半分钟。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>路见不平一声吼（主要是mbp网速抢不过Windows设备），倒要看看是谁在占用带宽！</p><h3 id="（以下教程请勿用于非法用途！）"><a href="#（以下教程请勿用于非法用途！）" class="headerlink" title="（以下教程请勿用于非法用途！）"></a>（以下教程请勿用于非法用途！）</h3><h4 id="1-开始抓包"><a href="#1-开始抓包" class="headerlink" title="1.开始抓包"></a>1.开始抓包</h4><p>宿舍公用的路由器在楼道里，所以我们并不知道无线路由器的品牌和管理员登录地址（居然不是常见的192.168.1.1），所以需要用Nmap或者IP Scanner扫描一下无线路由器的IP地址。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img1.png" alt="img1.png"><br>查一下发现管理员登录地址是192.168.XX.XXX，我们先尝试登录，发现只需要输入密码就可以(实际上登录用户名默认为admin，一会我们抓包的时候可以看到)，并且没有次数限制，给爆破提供了可能。<br>1、首先我们设置一下浏览器的代理，让burpsuite可以抓到包，以Chrome浏览器为例：<br>（1）macOS下设置一下浏览器的代理，设置为127.0.0.1:8080(一会儿让burpsuite监听这个端口)<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img2.png" alt="img2.png"><br>（2）打开burpsuite，查看Proxy-options，可以看到代理是否开启。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img3.png" alt="img3.png"><br>（3）确保Proxy-Intercept “Intercept is on” 处于监听状态。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img4.png" alt="img4.png"><br>（4）在管理员页面尝试登录，查看burpsuite抓到的包<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img6.png" alt="img6.png"><br>可以发现，password的值是经过加密的，并不是我输入的“12345678”，所以拿明文密码字典来爆破是得不到我们想要的结果。我们需要多进行一步，将密码字典按照规定的加密规则加密，得到新的密文密码字典。</p><h4 id="2-对密文密码进行爆破"><a href="#2-对密文密码进行爆破" class="headerlink" title="2.对密文密码进行爆破"></a>2.对密文密码进行爆破</h4><p>password参数的值是经过前端加密之后再进行传输的，这种情况下使用明文密码字典几乎不可能爆破成功。因此尝试本地调用该登录界面用来加密的js函数，将明文密码字典转为对应的密文密码字典。然后用密文字典进行爆破。<br>（1）定位登录界面用来加密的js函数</p><p><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img7.png" alt="img7.png"><br>(command+f)搜索check()函数定义的位置,可以看到对密码进行加密的函数是base64encode()和utf16to8() 这两个function。<br><br>定位到这两个函数，把他们从js文件里剥离出来</p><p>（2）用Python脚本调用js加密函数，将明文密码字典转换成密文字典<br>脚本结构如下，需要导入PyExecJS库。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img8.png" alt="img8.png"></p><h4 id="其中，PWD-txt是我的明文字典，base64PWD-txt用来储存转为密文的后字典的数据，login-js中是我提取的前端加密密码的js函数。"><a href="#其中，PWD-txt是我的明文字典，base64PWD-txt用来储存转为密文的后字典的数据，login-js中是我提取的前端加密密码的js函数。" class="headerlink" title="其中，PWD.txt是我的明文字典，base64PWD.txt用来储存转为密文的后字典的数据，login.js中是我提取的前端加密密码的js函数。"></a>其中，PWD.txt是我的明文字典，base64PWD.txt用来储存转为密文的后字典的数据，login.js中是我提取的前端加密密码的js函数。</h4><h6 id="1️⃣Exchange-py"><a href="#1️⃣Exchange-py" class="headerlink" title="1️⃣Exchange.py"></a>1️⃣Exchange.py</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import execjs #导入PyExecJS 库</span><br><span class="line"></span><br><span class="line">def get_js(): #导入js文件</span><br><span class="line">    f = open(&quot;login.js&quot;, &apos;r&apos;, encoding=&apos;UTF-8&apos;)</span><br><span class="line">    line = f.readline()</span><br><span class="line">    htmlstr = &apos;&apos;</span><br><span class="line">    while line:</span><br><span class="line">        htmlstr = htmlstr + line</span><br><span class="line">        line = f.readline()</span><br><span class="line">    return htmlstr</span><br><span class="line"></span><br><span class="line">jsstr = get_js()</span><br><span class="line">ctx = execjs.compile(jsstr)</span><br><span class="line"></span><br><span class="line">def creative_book(): #创建密文密码字典</span><br><span class="line">    f = open(&quot;PWD.txt&quot;)</span><br><span class="line">    for line in f:</span><br><span class="line">        r = line.strip(&apos;\n&apos;)</span><br><span class="line">        utf = ctx.call(&apos;utf16to8&apos;, r)</span><br><span class="line">        base64 = ctx.call(&apos;base64encode&apos;, utf)</span><br><span class="line">        h = open(&apos;base64PWD.txt&apos;, &apos;a&apos;)</span><br><span class="line">        h.write(&quot;\n&quot; + base64)</span><br><span class="line">        h.close()</span><br><span class="line">    f.close()</span><br><span class="line">creative_book()</span><br></pre></td></tr></table></figure><h6 id="2️⃣login-js"><a href="#2️⃣login-js" class="headerlink" title="2️⃣login.js"></a>2️⃣login.js</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">var base64EncodeChars = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&apos;;</span><br><span class="line"></span><br><span class="line">    function utf16to8(str) &#123;</span><br><span class="line">        var out,</span><br><span class="line">            i,</span><br><span class="line">            len,</span><br><span class="line">            c;</span><br><span class="line">        out = &apos;&apos;;</span><br><span class="line">        len = str.length;</span><br><span class="line">        for (i = 0; i &lt; len; i++) &#123;</span><br><span class="line">            c = str.charCodeAt(i);</span><br><span class="line">            if ((c &gt;= 0x0001) &amp;&amp; (c &lt;= 0x007F)) &#123;</span><br><span class="line">                out += str.charAt(i);</span><br><span class="line">            &#125; else if (c &gt; 0x07FF) &#123;</span><br><span class="line">                out += String.fromCharCode(0xE0 | ((c &gt;&gt; 12) &amp; 0x0F));</span><br><span class="line">                out += String.fromCharCode(0x80 | ((c &gt;&gt; 6) &amp; 0x3F));</span><br><span class="line">                out += String.fromCharCode(0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                out += String.fromCharCode(0xC0 | ((c &gt;&gt; 6) &amp; 0x1F));</span><br><span class="line">                out += String.fromCharCode(0x80 | ((c &gt;&gt; 0) &amp; 0x3F));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function base64encode(str) &#123;</span><br><span class="line">        var out,</span><br><span class="line">            i,</span><br><span class="line">            len;</span><br><span class="line">        var c1,</span><br><span class="line">            c2,</span><br><span class="line">            c3;</span><br><span class="line"></span><br><span class="line">        len = str.length;</span><br><span class="line">        i = 0;</span><br><span class="line">        out = &apos;&apos;;</span><br><span class="line">        while (i &lt; len) &#123;</span><br><span class="line">            c1 = str.charCodeAt(i++) &amp; 0xff;</span><br><span class="line">            if (i == len) &#123;</span><br><span class="line">                out += base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">                out += base64EncodeChars.charAt((c1 &amp; 0x3) &lt;&lt; 4);</span><br><span class="line">                out += &apos;==&apos;;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            c2 = str.charCodeAt(i++);</span><br><span class="line">            if (i == len) &#123;</span><br><span class="line">                out += base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">                out += base64EncodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));</span><br><span class="line">                out += base64EncodeChars.charAt((c2 &amp; 0xF) &lt;&lt; 2);</span><br><span class="line">                out += &apos;=&apos;;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            c3 = str.charCodeAt(i++);</span><br><span class="line">            out += base64EncodeChars.charAt(c1 &gt;&gt; 2);</span><br><span class="line">            out += base64EncodeChars.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));</span><br><span class="line">            out += base64EncodeChars.charAt(((c2 &amp; 0xF) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6));</span><br><span class="line">            out += base64EncodeChars.charAt(c3 &amp; 0x3F);</span><br><span class="line">        &#125;</span><br><span class="line">        return out;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="明文密码字典选择使用弱口令密码，跑一下程序，转为我们需要的密文密码字典。（关于弱口令密码字典请自行度娘下载，当然也可以自己生成）"><a href="#明文密码字典选择使用弱口令密码，跑一下程序，转为我们需要的密文密码字典。（关于弱口令密码字典请自行度娘下载，当然也可以自己生成）" class="headerlink" title="明文密码字典选择使用弱口令密码，跑一下程序，转为我们需要的密文密码字典。（关于弱口令密码字典请自行度娘下载，当然也可以自己生成）"></a>明文密码字典选择使用弱口令密码，跑一下程序，转为我们需要的密文密码字典。（关于弱口令密码字典请自行度娘下载，当然也可以自己生成）</h4><h5 id="对比一下："><a href="#对比一下：" class="headerlink" title="对比一下："></a>对比一下：</h5><p><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img9.png" alt="img9.png"><br>接下来在burpsuite中爆破时选择该字典就可以了。</p><h4 id="3-开始爆破"><a href="#3-开始爆破" class="headerlink" title="3.开始爆破"></a>3.开始爆破</h4><p>（1）抓到包后，在Proxy-Intercept页，右键send to Intruder<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img10.png" alt="img10.png"><br>（2）点进intruder-positions<br>（3）点击Clear取消他自动识别的地方，选择我们要修改的地方（即password），点add<br>（4）Proxy-Payloads-Options[Simple list] Add 选择一个字典文件，添加经过按规则加密后得到的字典base64PWD.txt。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img12.png" alt="img12.png"><br>（5）选择要启用的线程数等配置。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img13.png" alt="img13.png"><br>（5）start attack，开始爆破。<br><img src="/2019/03/18/利用burpsuite爆破密文密码（一）/img14.png" alt="img14.png"></p><h4 id="4-等待爆破完成"><a href="#4-等待爆破完成" class="headerlink" title="4.等待爆破完成"></a>4.等待爆破完成</h4><h5 id="能不能破解成功取决于密码字典里是否包含了正确密码。"><a href="#能不能破解成功取决于密码字典里是否包含了正确密码。" class="headerlink" title="能不能破解成功取决于密码字典里是否包含了正确密码。"></a>能不能破解成功取决于密码字典里是否包含了正确密码。</h5><h5 id="所以，我到底能否查出谁是挂机下载的罪魁祸首"><a href="#所以，我到底能否查出谁是挂机下载的罪魁祸首" class="headerlink" title="所以，我到底能否查出谁是挂机下载的罪魁祸首"></a>所以，我到底能否查出谁是挂机下载的罪魁祸首</h5><h5 id="请看下集使用ettercap抓取并分析数据包（其实还是没破解了，我可能需要一个更强大的密码字典，老板到底设置了一个多复杂的密码？！）"><a href="#请看下集使用ettercap抓取并分析数据包（其实还是没破解了，我可能需要一个更强大的密码字典，老板到底设置了一个多复杂的密码？！）" class="headerlink" title="请看下集使用ettercap抓取并分析数据包（其实还是没破解了，我可能需要一个更强大的密码字典，老板到底设置了一个多复杂的密码？！）"></a>请看下集使用ettercap抓取并分析数据包（其实还是没破解了，我可能需要一个更强大的密码字典，老板到底设置了一个多复杂的密码？！）</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;宿舍的WiFi实在是太慢了，打个网页都要半分钟。&lt;/p&gt;
&lt;h4 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Burpsuite" scheme="http://phewww.top/categories/Burpsuite/"/>
    
    
      <category term="爆破" scheme="http://phewww.top/tags/%E7%88%86%E7%A0%B4/"/>
    
      <category term="Burpsuite" scheme="http://phewww.top/tags/Burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot项目用JedisCluster方式连接Redis集群</title>
    <link href="http://phewww.top/2019/03/13/Spring-boot%E9%A1%B9%E7%9B%AE%E7%94%A8JedisCluster%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5Redis%E9%9B%86%E7%BE%A4/"/>
    <id>http://phewww.top/2019/03/13/Spring-boot项目用JedisCluster方式连接Redis集群/</id>
    <published>2019-03-13T06:31:00.000Z</published>
    <updated>2019-03-13T10:53:33.472Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用spring boot做项目，使用redis做缓存。在开发的时候使用redis集群配置，由于项目的spring boot版本为1.4.2.RELEASE，因此没有使用RedisTemplate，而是JedisCluster。但是网上关于spring boot集成jedis的Demon比较较少，大都讲得比较模糊，明明题目是讲如何集成jedis，代码里用却使的是RedisTemplate，POM文件还同时引了spring-boot-data-redis和jedis的包，让我踩了不少的坑。</p><h4 id="1-spring-boot-data-redis和jedis的区别"><a href="#1-spring-boot-data-redis和jedis的区别" class="headerlink" title="1.spring-boot-data-redis和jedis的区别"></a>1.spring-boot-data-redis和jedis的区别</h4><p>对于刚接触spring-boot-data-redis的同学，与jedis的关系很容易搞混，这里对spring-boot-data-redis同jedis做一个简单的说明。并提供JedisCluster与Spring boot项目的整合方式。</p><h5 id="（1）spring-data-redis"><a href="#（1）spring-data-redis" class="headerlink" title="（1）spring-data-redis"></a>（1）spring-data-redis</h5><p>spring-data-redis依赖jedis或Lettuce，实际上是对jedis这些客户端的封装，提供一套与客户端无关的api供应用使用，从而你在从一个redis客户端切换为另一个客户端，不需要修改业务代码。其中Spring boot 1.X 版本默认依赖jedis，而Spring boot 2.X 版本则改为Lettuce。</p><h5 id="（2）jedis"><a href="#（2）jedis" class="headerlink" title="（2）jedis"></a>（2）jedis</h5><p>Jedis是redis的java客户端，通过它可以对redis进行操作。与之功能相似的还包括：Redisson和Lettuce等。</p><h5 id="操作单个reids使用jedis对象"><a href="#操作单个reids使用jedis对象" class="headerlink" title="操作单个reids使用jedis对象"></a>操作单个reids使用jedis对象</h5><p><img src="/2019/03/13/Spring-boot项目用JedisCluster方式连接Redis集群/img1.png" alt="img1.png"><br>每一个接口都代表了一类Redis命令，例如JedisCommands中包含了SET GET等命令，MultiKeyCommands中包含了针对多个Key的MSET MGET等命令。</p><h5 id="操作集群reids使用jedisCluster对象"><a href="#操作集群reids使用jedisCluster对象" class="headerlink" title="操作集群reids使用jedisCluster对象"></a>操作集群reids使用jedisCluster对象</h5><p><img src="/2019/03/13/Spring-boot项目用JedisCluster方式连接Redis集群/img2.png" alt="img2.png"></p><h6 id="可以看出JedisCluster与Jedis之间并没有继承关系。"><a href="#可以看出JedisCluster与Jedis之间并没有继承关系。" class="headerlink" title="可以看出JedisCluster与Jedis之间并没有继承关系。"></a>可以看出JedisCluster与Jedis之间并没有继承关系。</h6><p>Jediscluster类图和jedis类图大致一样，不过jedisCluster有一些命令是不可用的。比如BinaryJedisCluster类被作废的命令，主要是用在集群中。</p><h4 id="2-Spring-boot-集成-jedis"><a href="#2-Spring-boot-集成-jedis" class="headerlink" title="2.Spring boot 集成 jedis"></a>2.Spring boot 集成 jedis</h4><h5 id="关于jedis操作单个Redis我这里不再重复，我们主要说说使用JedisCluster操作Redis集群。"><a href="#关于jedis操作单个Redis我这里不再重复，我们主要说说使用JedisCluster操作Redis集群。" class="headerlink" title="关于jedis操作单个Redis我这里不再重复，我们主要说说使用JedisCluster操作Redis集群。"></a>关于jedis操作单个Redis我这里不再重复，我们主要说说使用JedisCluster操作Redis集群。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">项目由Maven构建</span><br><span class="line">jdk版本：1.8</span><br><span class="line">jedis版本：2.9.0 </span><br><span class="line">Rdeis版本：3.0.6</span><br><span class="line">SpringBoot版本：1.4.2.RELEASE</span><br></pre></td></tr></table></figure><h5 id="（1）POM文件"><a href="#（1）POM文件" class="headerlink" title="（1）POM文件"></a>（1）POM文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- lombok组件，需要你的IDE安装lombok插件，</span><br><span class="line">            通过使用对应的注解，</span><br><span class="line">            可以在编译源码的时候生成对应的方法，</span><br><span class="line">            在这个例子中，</span><br><span class="line">            @Data注解会在RedisConfig类中提供所有属性的getter和setter方法 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--只有2.9.0才有密码设置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--使用commons-pool2连接池--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="（2）application-yml"><a href="#（2）application-yml" class="headerlink" title="（2）application.yml"></a>（2）application.yml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-boot-redis</span><br><span class="line">  redis:</span><br><span class="line">    #集群配置</span><br><span class="line">    config:</span><br><span class="line">      clusterNodes:</span><br><span class="line">         - xx.xx.xxx.xxx:7001</span><br><span class="line">         - xx.xx.xxx.xxx:7002</span><br><span class="line">         - xx.xx.xxx.xxx:7003</span><br><span class="line">         - xx.xx.xxx.xxx:7004</span><br><span class="line">         - xx.xx.xxx.xxx:7005</span><br><span class="line">         - xx.xx.xxx.xxx:7006</span><br><span class="line">      connectionTimeout: 60000</span><br><span class="line">      soTimeout: 3000</span><br><span class="line">      maxAttempts: 1000</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure><h5 id="（3）RedisConfig-java-redis属性配置"><a href="#（3）RedisConfig-java-redis属性配置" class="headerlink" title="（3）RedisConfig.java (redis属性配置)"></a>（3）RedisConfig.java (redis属性配置)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: zhang pengcheng</span><br><span class="line"> * @date: 2019/3/1 8:30 PM</span><br><span class="line"> * @description:</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">@Data</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.redis.config&quot;)</span><br><span class="line">public class RedisConfig&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 集群节点</span><br><span class="line">     */</span><br><span class="line">    private List&lt;String&gt; clusterNodes;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 密码</span><br><span class="line">     */</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 连接超时时间</span><br><span class="line">     */</span><br><span class="line">    private int connectionTimeout;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取数据超时时间</span><br><span class="line">     */</span><br><span class="line">    private int soTimeout;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 最大尝试次数</span><br><span class="line">     */</span><br><span class="line">    private int maxAttempts;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（4）JedisCluster-java-JedisCluster属性配置、JedisPoolConfig属性配置"><a href="#（4）JedisCluster-java-JedisCluster属性配置、JedisPoolConfig属性配置" class="headerlink" title="（4）JedisCluster.java (JedisCluster属性配置、JedisPoolConfig属性配置)"></a>（4）JedisCluster.java (JedisCluster属性配置、JedisPoolConfig属性配置)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import com.asiainfo.redis.utils.JedisClusterUtil;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import redis.clients.jedis.HostAndPort;</span><br><span class="line">import redis.clients.jedis.JedisCluster;</span><br><span class="line">import redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: zhang pengcheng</span><br><span class="line"> * @date: 2019/3/1 8:36 PM</span><br><span class="line"> * @description:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class JedisClusterConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisConfig redisConfig;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(JedisClusterUtil.class);</span><br><span class="line"></span><br><span class="line">    //使用单例模式，把JedisCluster作为static的类成员，(使用懒汉单例模式)</span><br><span class="line">    private static JedisCluster jedisCluster = null;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public synchronized JedisCluster getJedisCluster() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            logger.info(&quot; &gt;&gt;&gt;&gt;&gt;&gt;&gt; REDIS CLUSTER连接池,开始启动 &gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;);</span><br><span class="line">            JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();</span><br><span class="line">            jedisPoolConfig.setTestOnBorrow(true);</span><br><span class="line">            jedisPoolConfig.setTestOnReturn(true);</span><br><span class="line">            jedisPoolConfig.setTestOnCreate(true);</span><br><span class="line">            jedisPoolConfig.setTestWhileIdle(true);</span><br><span class="line">            jedisPoolConfig.setMaxTotal(300);</span><br><span class="line">            jedisPoolConfig.setMinIdle(5);</span><br><span class="line">            //一定要设置不然会一直等待获取连接导致线程阻塞</span><br><span class="line">            jedisPoolConfig.setMaxWaitMillis(6000);</span><br><span class="line">            //获得节点配置信息</span><br><span class="line">            Set&lt;HostAndPort&gt; nodes = new HashSet&lt;&gt;();</span><br><span class="line">            if (redisConfig.getClusterNodes() != null) &#123;</span><br><span class="line">                for (String ipAndPort : redisConfig.getClusterNodes()) &#123;</span><br><span class="line">                    String[] ipOrPort = ipAndPort.split(&quot;:&quot;);</span><br><span class="line">                    HostAndPort hostAndPort = new HostAndPort(ipOrPort[0], Integer.parseInt(ipOrPort[1]));</span><br><span class="line">                    nodes.add(hostAndPort);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //初始化 只有当jedisCluster为空时才实例化</span><br><span class="line">            if (jedisCluster == null&amp;&amp;nodes.size() &gt; 0)  &#123;</span><br><span class="line">                //redis有密码,配置JedisCluster</span><br><span class="line">                if (redisConfig.getPassword() != null) &#123;</span><br><span class="line">                    jedisCluster = new JedisCluster(nodes, redisConfig.getConnectionTimeout(), redisConfig.getSoTimeout(), redisConfig.getMaxAttempts(), redisConfig.getPassword(), jedisPoolConfig);</span><br><span class="line">                &#125;</span><br><span class="line">                //redis无密码,配置JedisCluster</span><br><span class="line">                else &#123;</span><br><span class="line">                    jedisCluster = new JedisCluster(nodes, redisConfig.getConnectionTimeout(), redisConfig.getSoTimeout(), redisConfig.getMaxAttempts(), jedisPoolConfig);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(&quot; &gt;&gt;&gt;&gt;&gt;&gt;&gt; REDIS CLUSTER 连接池,启动成功 &gt;&gt;&gt;&gt;&gt;&gt; &quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                logger.warn(&quot;&#123;&#125; redis 连接异常&quot;, nodes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;&gt;&gt;&gt;&gt;&gt;&gt; REDIS CLUSTER 连接池,初始化失败 &gt;&gt;&gt;&gt;&gt;&gt; &quot;, e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return jedisCluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（5）JedisClusterUtil-java"><a href="#（5）JedisClusterUtil-java" class="headerlink" title="（5）JedisClusterUtil.java"></a>（5）JedisClusterUtil.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: zhang pengcheng</span><br><span class="line"> * @date: 2019/3/2 11:06 AM</span><br><span class="line"> * @description: JedisClusterUtil redis集群工具类</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class JedisClusterUtil implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(JedisClusterUtil.class);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param key   缓存key</span><br><span class="line">     * @param value 缓存value</span><br><span class="line">     */</span><br><span class="line">    public void set(String key, String value) &#123;</span><br><span class="line">        jedisCluster.set(key, value);</span><br><span class="line">        LOGGER.debug(&quot;JedisClusterUtil:set cache key=&#123;&#125;,value=&#123;&#125;&quot;, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置缓存对象</span><br><span class="line">     *</span><br><span class="line">     * @param key 缓存key</span><br><span class="line">     * @param obj 缓存value</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setObject(String key, T obj, int expireTime) &#123;</span><br><span class="line">        jedisCluster.setex(key, expireTime, JSON.toJSONString(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定key的缓存</span><br><span class="line">     *</span><br><span class="line">     * @param key---JSON.parseObject(value, User.class);</span><br><span class="line">     */</span><br><span class="line">    public String getObject(String key) &#123;</span><br><span class="line">        return jedisCluster.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断当前key值 是否存在</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public boolean hasKey(String key) &#123;</span><br><span class="line">        return jedisCluster.exists(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置缓存，并且自己指定过期时间</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param value</span><br><span class="line">     * @param expireTime 过期时间</span><br><span class="line">     */</span><br><span class="line">    public void setWithExpireTime(String key, String value, int expireTime) &#123;</span><br><span class="line">        jedisCluster.setex(key, expireTime, value);</span><br><span class="line">        LOGGER.debug(&quot;JedisClusterUtil:setWithExpireTime cache key=&#123;&#125;,value=&#123;&#125;,expireTime=&#123;&#125;&quot;, key, value, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定key的缓存</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public String get(String key) &#123;</span><br><span class="line">        String value = jedisCluster.get(key);</span><br><span class="line">        LOGGER.debug(&quot;JedisClusterUtil:get cache key=&#123;&#125;,value=&#123;&#125;&quot;, key, value);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除指定key的缓存</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public void delete(String key) &#123;</span><br><span class="line">        jedisCluster.del(key);</span><br><span class="line">        LOGGER.debug(&quot;JedisClusterUtil:delete cache key=&#123;&#125;&quot;, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测一下"><a href="#测一下" class="headerlink" title="测一下"></a>测一下</h4><h5 id="（6）JedisClusterUtilTest-java"><a href="#（6）JedisClusterUtilTest-java" class="headerlink" title="（6）JedisClusterUtilTest.java"></a>（6）JedisClusterUtilTest.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import com.asiainfo.redis.po.TestMan;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: zhang pengcheng</span><br><span class="line"> * @date: 2019/3/2 5:34 PM</span><br><span class="line"> * @description: JedisClusterUtil测试类</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class JedisClusterUtilTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JedisClusterUtil jedisClusterUtil;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void set() &#123;</span><br><span class="line">        jedisClusterUtil.set(&quot;name&quot;, &quot;jedis&quot;);</span><br><span class="line">        Assert.assertEquals(&quot;jedis&quot;,jedisClusterUtil.get(&quot;name&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void get() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void setObject() &#123;</span><br><span class="line">        TestMan man = new TestMan();</span><br><span class="line">        man.setId(10087L);</span><br><span class="line">        man.setAge(18);</span><br><span class="line">        man.setPassword(&quot;********&quot;);</span><br><span class="line">        man.setSex(0);</span><br><span class="line">        man.setUsername(&quot;弓长&quot;);</span><br><span class="line">        jedisClusterUtil.setObject(&quot;10087L&quot;, man, 200);</span><br><span class="line">        Assert.assertNotNull(jedisClusterUtil.getObject(&quot;10087L&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getObject() &#123;</span><br><span class="line">        System.out.println(jedisClusterUtil.getObject(&quot;10087L&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void hasKey() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void setWithExpireTime() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        jedisClusterUtil.delete(&quot;10087L&quot;);</span><br><span class="line">        Assert.assertEquals(null, jedisClusterUtil.get(&quot;10087L&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/03/13/Spring-boot项目用JedisCluster方式连接Redis集群/img3.png" alt="img3.png"></p><h4 id="Done！😘"><a href="#Done！😘" class="headerlink" title="Done！😘"></a>Done！😘</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在用spring boot做项目，使用redis做缓存。在开发的时候使用redis集群配置，由于项目的spring boot版本为1.4.2.RELEASE，因此没有使用RedisTemplate，而是JedisCluster。但是网上关于spring boot集成je
      
    
    </summary>
    
      <category term="Redis" scheme="http://phewww.top/categories/Redis/"/>
    
    
      <category term="Spring Boot" scheme="http://phewww.top/tags/Spring-Boot/"/>
    
      <category term="Redis集群" scheme="http://phewww.top/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
      <category term="Jedis" scheme="http://phewww.top/tags/Jedis/"/>
    
      <category term="JedisCluster" scheme="http://phewww.top/tags/JedisCluster/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7更新Python版本导致yum不能用</title>
    <link href="http://phewww.top/2019/03/06/CentOs%E6%9B%B4%E6%96%B0Python%E5%AF%BC%E8%87%B4yum%E4%B8%8D%E8%83%BD%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://phewww.top/2019/03/06/CentOs更新Python导致yum不能用的解决办法/</id>
    <published>2019-03-06T13:53:00.000Z</published>
    <updated>2019-03-07T02:20:40.163Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞一个微信机器人的demo，运行在阿里云上，项目需要python环境的版本是2.7.X，然而服务器默认依赖的版本仍然是2.4.X，所以更新了python的版本（更新后ython版本是2.7.X），运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/06/CentOs更新Python导致yum不能用的解决办法/img1.png" alt="img1.png"></p><p>但是项目依旧无法运行，于是百度，<br></p><h6 id="更改项目文件对python依赖的连接"><a href="#更改项目文件对python依赖的连接" class="headerlink" title="更改项目文件对python依赖的连接"></a>更改项目文件对python依赖的连接</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python2.7</span><br></pre></td></tr></table></figure><h4 id="问题没有解决。"><a href="#问题没有解决。" class="headerlink" title="问题没有解决。"></a>问题没有解决。</h4><p>继续百度，搜到一个解决方案：<br></p><h6 id="更改系统依赖python的软连接-然后把项目依赖从python2-7改回python"><a href="#更改系统依赖python的软连接-然后把项目依赖从python2-7改回python" class="headerlink" title="更改系统依赖python的软连接,然后把项目依赖从python2.7改回python"></a>更改系统依赖python的软连接,然后把项目依赖从python2.7改回python</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure><h4 id="但是问题仍然没有解决。"><a href="#但是问题仍然没有解决。" class="headerlink" title="但是问题仍然没有解决。"></a>但是问题仍然没有解决。</h4><h6 id="反而导致yum不能用了。"><a href="#反而导致yum不能用了。" class="headerlink" title="反而导致yum不能用了。"></a>反而导致yum不能用了。</h6><p>干脆完全卸载python和yum</p><h5 id="重新安装！"><a href="#重新安装！" class="headerlink" title="重新安装！"></a>重新安装！</h5><h6 id="1-完全卸载python"><a href="#1-完全卸载python" class="headerlink" title="1.完全卸载python"></a>1.完全卸载python</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##强制删除已安装程序及其关联</span><br><span class="line">rpm -qa|grep python|xargs rpm -ev --allmatches --nodeps</span><br><span class="line">##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令</span><br><span class="line">whereis python |xargs rm -frv </span><br><span class="line">##验证删除，返回无结果说明删干净了</span><br><span class="line">whereis python</span><br></pre></td></tr></table></figure><h6 id="2-完全卸载yum"><a href="#2-完全卸载yum" class="headerlink" title="2.完全卸载yum"></a>2.完全卸载yum</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##强制删除已安装程序及其关联</span><br><span class="line">rpm -qa|grep yum|xargs rpm -ev --allmatches --nodeps</span><br><span class="line">##验证删除，返回无结果说明删干净了</span><br><span class="line">#whereis yum |xargs rm -frv</span><br></pre></td></tr></table></figure><h6 id="3、下载相关安装包"><a href="#3、下载相关安装包" class="headerlink" title="3、下载相关安装包"></a>3、下载相关安装包</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ibxml2-python-2.9.1-6.el7_2.3.x86_64.rpm</span><br><span class="line">python-2.7.5-76.el7.x86_64.rpm</span><br><span class="line">python-backports-1.0-8.el7.x86_64.rpm</span><br><span class="line">python-backports-ssl_match_hostname-3.5.0.1-1.el7.noarch.rpm</span><br><span class="line">python-chardet-2.2.1-1.el7_1.noarch.rpm</span><br><span class="line">python-devel-2.7.5-76.el7.x86_64.rpm</span><br><span class="line">python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class="line">python-ipaddress-1.0.16-2.el7.noarch.rpm</span><br><span class="line">python-kitchen-1.1.1-5.el7.noarch.rpm</span><br><span class="line">python-libs-2.7.5-76.el7.x86_64.rpm</span><br><span class="line">python-pycurl-7.19.0-19.el7.x86_64.rpm</span><br><span class="line">python-setuptools-0.9.8-7.el7.noarch.rpm</span><br><span class="line">python-urlgrabber-3.10-9.el7.noarch.rpm</span><br><span class="line">rpm-4.11.3-35.el7.x86_64.rpm</span><br><span class="line">rpm-build-libs-4.11.3-35.el7.x86_64.rpm</span><br><span class="line">rpm-libs-4.11.3-35.el7.x86_64.rpm</span><br><span class="line">rpm-python-4.11.3-35.el7.x86_64.rpm</span><br><span class="line">yum-3.4.3-161.el7.centos.noarch.rpm</span><br><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line">yum-plugin-aliases-1.1.31-50.el7.noarch.rpm</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-50.el7.noarch.rpm</span><br><span class="line">yum-plugin-protectbase-1.1.31-50.el7.noarch.rpm</span><br><span class="line">yum-utils-1.1.31-50.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h6 id="4-下载相关安装包下载地址："><a href="#4-下载相关安装包下载地址：" class="headerlink" title="4.下载相关安装包下载地址："></a>4.下载相关安装包下载地址：</h6><p>网易镜像下载地址：<br><a href="http://mirrors.163.com/centos/7/os/x86_64/Packages/" target="_blank" rel="noopener">http://mirrors.163.com/centos/7/os/x86_64/Packages/</a><br></p><h5 id="PS：一个一个找是不是很心塞-😶-我也是这么过来的。。。"><a href="#PS：一个一个找是不是很心塞-😶-我也是这么过来的。。。" class="headerlink" title="PS：一个一个找是不是很心塞?😶 我也是这么过来的。。。"></a>PS：一个一个找是不是很心塞?😶 我也是这么过来的。。。<br></h5><p>百度云下载地址：<br><a href="https://pan.baidu.com/s/19BhscxOYTz1kebnmPaIKuQ/" target="_blank" rel="noopener">https://pan.baidu.com/s/19BhscxOYTz1kebnmPaIKuQ/</a><br><br>提取码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hswz</span><br></pre></td></tr></table></figure></p><p>拿走不谢😘</p><h6 id="5-开始安装"><a href="#5-开始安装" class="headerlink" title="5.开始安装"></a>5.开始安装</h6><p>把安装包放到/usr/local/src/python路径下<br>在当前路径下执行：</p><h6 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##增加--nodeps不会报需要依赖的错误</span><br><span class="line">rpm -ivh python-*   rpm-python-*  --nodeps</span><br></pre></td></tr></table></figure><h6 id="安装yum"><a href="#安装yum" class="headerlink" title="安装yum"></a>安装yum</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##增加--nodeps不会报需要依赖的错误</span><br><span class="line">rpm -ivh yum-* --nodeps</span><br></pre></td></tr></table></figure><h6 id="安装rpm依赖"><a href="#安装rpm依赖" class="headerlink" title="安装rpm依赖"></a>安装rpm依赖</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##增加--nodeps不会报需要依赖的错误</span><br><span class="line">rpm -ivh rpm-* --nodeps</span><br></pre></td></tr></table></figure><h6 id="6-验证安装"><a href="#6-验证安装" class="headerlink" title="6.验证安装"></a>6.验证安装</h6><h6 id="python："><a href="#python：" class="headerlink" title="python："></a>python：</h6><p><img src="/2019/03/06/CentOs更新Python导致yum不能用的解决办法/img2.png" alt="img2.png"></p><h6 id="yum："><a href="#yum：" class="headerlink" title="yum："></a>yum：</h6><p><img src="/2019/03/06/CentOs更新Python导致yum不能用的解决办法/img3.png" alt="img3.png"></p><h3 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在搞一个微信机器人的demo，运行在阿里云上，项目需要python环境的版本是2.7.X，然而服务器默认依赖的版本仍然是2.4.X，所以更新了python的版本（更新后ython版本是2.7.X），运行&lt;br&gt;&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
      <category term="Linux" scheme="http://phewww.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://phewww.top/tags/Linux/"/>
    
      <category term="yum" scheme="http://phewww.top/tags/yum/"/>
    
      <category term="python" scheme="http://phewww.top/tags/python/"/>
    
      <category term="rpm" scheme="http://phewww.top/tags/rpm/"/>
    
  </entry>
  
  <entry>
    <title>Mac下jdk环境变量的配置</title>
    <link href="http://phewww.top/2019/02/21/Mac%E4%B8%8Bjdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://phewww.top/2019/02/21/Mac下jdk环境变量的配置/</id>
    <published>2019-02-21T07:54:00.000Z</published>
    <updated>2019-02-21T10:06:55.739Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载jdk： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle官网下载地址 </a>下载JDK1.8并安装</p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img1.png" alt="img1.png"></p><p>2.一路默认选项安装完成后，打开终端检查安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /usr/bin/java</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img2.png" alt="img2.png"></p><p><img src="/2019/02/21/Mac下jdk环境变量的配置/img3.png" alt="img3.png"></p><p>3.配置Java环境变量<br><br>（1）输入sudo vim /etc/profile，回车，输入密码（不显示密码只管输入后回车就好）。</p><p>（2）如果出现E325警告。输入E，edit anyway，回车。</p><p>（3）按下i，显示insert，进入输入模式。</p><p>（4）文件尾部添加Java路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">⚠️⚠️⚠️这是你的路径，此处以jdk1.8.0_121.jdk为例 </span><br><span class="line"></span><br><span class="line">JAVA_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home&quot;</span><br><span class="line">CLASS_HOME=&quot;$JAVA_HOME/lib&quot;</span><br><span class="line">PATH=&quot;.$PATH:$JAVA_HOME/bin&quot;</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></p><p>(5)编辑好后，点击esc，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></table></figure></p><p>退出编辑。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img4.png" alt="img4.png"><br>（6）要想马上生效，输入source /etc/profile。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img5.png" alt="img5.png"><br>（7）检查环境。输入echo $JAVA_HOME。配置完毕。<br><img src="/2019/02/21/Mac下jdk环境变量的配置/img6.png" alt="img6.png"></p><h5 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.下载jdk： &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Or
      
    
    </summary>
    
      <category term="环境配置" scheme="http://phewww.top/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Mac" scheme="http://phewww.top/tags/Mac/"/>
    
      <category term="jdk" scheme="http://phewww.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title> 用Lambda表达式快速地处理集合</title>
    <link href="http://phewww.top/2019/01/24/%E7%94%A8Lambda%E5%BF%AB%E9%80%9F%E5%9C%B0%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/"/>
    <id>http://phewww.top/2019/01/24/用Lambda快速地处理集合/</id>
    <published>2019-01-24T02:34:00.000Z</published>
    <updated>2019-02-04T03:19:43.972Z</updated>
    
    <content type="html"><![CDATA[<h5 id="for-循环不是挺好的吗"><a href="#for-循环不是挺好的吗" class="headerlink" title="for 循环不是挺好的吗"></a>for 循环不是挺好的吗</h5><p>在 Java 的第 1 个版本中就开始引入了传统的 for 循环，它的更简单的变体 for-each 是在 Java 5 中引入的。大部分开发人员更喜欢使用 for-each 执行日常迭代，但对于迭代一个范围或跳过范围中的值等操作，仍会使用 for循环。</p><h5 id="for-循环非常强大，但它包含太多可变部分。"><a href="#for-循环非常强大，但它包含太多可变部分。" class="headerlink" title="for 循环非常强大，但它包含太多可变部分。"></a>for 循环非常强大，但它包含太多可变部分。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 1; i &lt; 6; i++) &#123;</span><br><span class="line">  System.out.print(i + &quot;starts&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有太多代码，但比较繁琐。Java 8 提供了一种更简单、更优雅的替代方法：Lambda表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(1, 6)</span><br><span class="line">  .forEach(i -&gt; System.out.print(i + &quot;starts&quot;));</span><br></pre></td></tr></table></figure></p><p>并没有显著减少代码量，但降低了它的复杂性。这样做有两个重要原因：</p><h6 id="1-不同于-for，range不会强迫我们初始化某个可变变量。"><a href="#1-不同于-for，range不会强迫我们初始化某个可变变量。" class="headerlink" title="1.不同于 for，range不会强迫我们初始化某个可变变量。"></a>1.不同于 for，range不会强迫我们初始化某个可变变量。<br></h6><h6 id="2-迭代会自动执行，所以不需要像循环索引一样定义增量。"><a href="#2-迭代会自动执行，所以不需要像循环索引一样定义增量。" class="headerlink" title="2.迭代会自动执行，所以不需要像循环索引一样定义增量。"></a>2.迭代会自动执行，所以不需要像循环索引一样定义增量。</h6><h5 id="开始使用Lambda"><a href="#开始使用Lambda" class="headerlink" title="开始使用Lambda"></a>开始使用Lambda</h5><p>首先我们先创建一个 Car 泛型的 List<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = new ArrayList&lt;&gt;();</span><br><span class="line">cars.add(new Car(&quot;Benz&quot;,&quot;G63&quot;,&quot;black&quot;));</span><br><span class="line">cars.add(new Car(&quot;Audi&quot;,&quot;RS6&quot;,&quot;blue&quot;));</span><br><span class="line">cars.add(new Car(&quot;Mitsubishi&quot;,&quot;EVOIIV&quot;,&quot;white&quot;));</span><br></pre></td></tr></table></figure></p><p>Car 类包含品牌、型号和颜色3个属性</p><h6 id="1-stream"><a href="#1-stream" class="headerlink" title="1. stream()"></a>1. stream()</h6><p>将集合转换为流</p><h6 id="2-filter-T-gt-boolean"><a href="#2-filter-T-gt-boolean" class="headerlink" title="2. filter(T -&gt; boolean)"></a>2. filter(T -&gt; boolean)</h6><p>保留 boolean 为 true 的元素<br><br> <strong>举个栗子</strong><br><br> 保留品牌为Mitsubishi的Car元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = cars.stream()</span><br><span class="line">            .filter(Car -&gt;Car.getBrand().equals(&quot;Mitsubishi&quot;))</span><br><span class="line">            .collect(toList()); //把流转换为 List 类型</span><br></pre></td></tr></table></figure></p><h6 id="3-distinct"><a href="#3-distinct" class="headerlink" title="3. distinct()"></a>3. distinct()</h6><p>去除重复元素，通过类的 equals 方法来判断两个元素是否相等</p><h6 id="4-sorted-sorted-T-T-gt-int"><a href="#4-sorted-sorted-T-T-gt-int" class="headerlink" title="4. sorted() / sorted((T, T) -&gt; int)"></a>4. sorted() / sorted((T, T) -&gt; int)</h6><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序</p><h6 id="5-limit-long-n"><a href="#5-limit-long-n" class="headerlink" title="5. limit(long n)"></a>5. limit(long n)</h6><p>返回前 n 个元素</p><h6 id="6-skip-long-n"><a href="#6-skip-long-n" class="headerlink" title="6. skip(long n)"></a>6. skip(long n)</h6><p>去除前 n 个元素</p><h6 id="7-map-T-gt-R"><a href="#7-map-T-gt-R" class="headerlink" title="7. map(T -&gt; R)"></a>7. map(T -&gt; R)</h6><p>将流中的每一个元素 T 映射为 R（类似类型转换）</p><h6 id="8-flatMap-T-gt-Stream"><a href="#8-flatMap-T-gt-Stream" class="headerlink" title="8. flatMap(T -&gt; Stream"></a>8. flatMap(T -&gt; Stream</h6><p>将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流</p><h6 id="9-anyMatch-T-gt-boolean"><a href="#9-anyMatch-T-gt-boolean" class="headerlink" title="9. anyMatch(T -&gt; boolean)"></a>9. anyMatch(T -&gt; boolean)</h6><p>流中是否有一个元素匹配给定的 T -&gt; boolean 条件</p><h6 id="10-allMatch-T-gt-boolean"><a href="#10-allMatch-T-gt-boolean" class="headerlink" title="10. allMatch(T -&gt; boolean)"></a>10. allMatch(T -&gt; boolean)</h6><p>流中是否所有元素都匹配给定的 T -&gt; boolean 条件</p><h6 id="11-noneMatch-T-gt-boolean"><a href="#11-noneMatch-T-gt-boolean" class="headerlink" title="11. noneMatch(T -&gt; boolean)"></a>11. noneMatch(T -&gt; boolean)</h6><p>流中是否没有元素匹配给定的 T -&gt; boolean 条件</p><h6 id="12-findAny-和-findFirst"><a href="#12-findAny-和-findFirst" class="headerlink" title="12. findAny() 和 findFirst()"></a>12. findAny() 和 findFirst()</h6><p>findAny()：找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）<br>findFirst()：找到第一个元素</p><h6 id="13-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T"><a href="#13-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T" class="headerlink" title="13. reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)"></a>13. reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)</h6><p>用于组合流中的元素，如求和，求积，求最大值等</p><h6 id="13-count"><a href="#13-count" class="headerlink" title="13. count()"></a>13. count()</h6><p>返回流中元素个数，结果为 long 类型</p><h6 id="14-collect"><a href="#14-collect" class="headerlink" title="14. collect()"></a>14. collect()</h6><p>收集方法，常用的是 collect(toList())，当然还有 collect(toSet()) 等，参数是一个收集器接口</p><h6 id="15-forEach"><a href="#15-forEach" class="headerlink" title="15. forEach()"></a>15. forEach()</h6><p>遍历集合<br></p><h5 id="多层循环怎么处理"><a href="#多层循环怎么处理" class="headerlink" title="多层循环怎么处理"></a>多层循环怎么处理</h5><p><strong>举个稍复杂的栗子</strong></p><p>给汽车装上轮子，要求颜色一样，而且轮子能转</p><p>先来看for 循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars = new ArrayList&lt;&gt;(); </span><br><span class="line">    for (Car car : cars) &#123; </span><br><span class="line">     for (Wheel wheel : wheels) &#123; </span><br><span class="line">      if (car.getColor() == wheel.getColor() &amp;&amp; </span><br><span class="line">        wheel.isWorking() == true) &#123; </span><br><span class="line">       filteredCars.add(car); </span><br><span class="line">       break; </span><br><span class="line">      &#125; </span><br><span class="line">     &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return filteredCars;</span><br></pre></td></tr></table></figure></p><p>再来看Lambda表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; filteredCars = cars.stream() </span><br><span class="line">                    .filter (car -&gt; wheels.stream() </span><br><span class="line">                    .anyMatch(wheel -&gt; wheel.getColor() == car.getColor() &amp;&amp;  wheel.isWorking())) </span><br><span class="line">                    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><h5 id="真好。"><a href="#真好。" class="headerlink" title="真好。"></a>真好。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;for-循环不是挺好的吗&quot;&gt;&lt;a href=&quot;#for-循环不是挺好的吗&quot; class=&quot;headerlink&quot; title=&quot;for 循环不是挺好的吗&quot;&gt;&lt;/a&gt;for 循环不是挺好的吗&lt;/h5&gt;&lt;p&gt;在 Java 的第 1 个版本中就开始引入了传统的 for 
      
    
    </summary>
    
      <category term="编程" scheme="http://phewww.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://phewww.top/tags/java/"/>
    
      <category term="for循环" scheme="http://phewww.top/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="lambda表达式" scheme="http://phewww.top/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo-admin插件管理Hexo博客</title>
    <link href="http://phewww.top/2019/01/10/%E5%88%A9%E7%94%A8Hexo-admin%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://phewww.top/2019/01/10/利用Hexo-admin插件管理Hexo博客/</id>
    <published>2019-01-10T10:02:00.000Z</published>
    <updated>2019-02-04T03:19:43.968Z</updated>
    
    <content type="html"><![CDATA[<p>成功用github+hexo搭建好个人博客之后，找一个自己喜欢的主题运用到自己的博客中：</p><h5 id="挑个好看的主题"><a href="#挑个好看的主题" class="headerlink" title="挑个好看的主题"></a>挑个好看的主题</h5><p>在网上能找到很多好看的主题供你下载。</p><p>知乎话题：<a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a></p><p>也可以去hexo下载官方主题。</p><h5 id="下载主题到本地"><a href="#下载主题到本地" class="headerlink" title="下载主题到本地"></a>下载主题到本地</h5><p> 选一个，比如NEXT主题，<br> <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img2.png" alt="img2.png"><br> 复制该主题的URL<br><br> 用git bash，进入到博客的本地目录中,<br> <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img1.png" alt="img1.png"><br> 使用clone 命令将主题拉取到本地：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/theme-next/hexo-theme-next themes/next.</span><br></pre></td></tr></table></figure></p><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>  打开当前目录下的“_config.yml”配置文件。</p><h5 id="更多可选配置"><a href="#更多可选配置" class="headerlink" title="更多可选配置"></a>更多可选配置</h5><p> NEXT官方主题：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">使用文档</a></p><p>  找到theme的配置选项，一般在文件的最后。之后，将theme选项配置为我们新下载好的next主题即可。<br>   <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img3.png" alt="img3.png"><br>   注意YML文件的格式，<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:</span><br></pre></td></tr></table></figure></p><p>   后面有空格！</p><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><p>   回到git bash，输入调试命令：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --debug</span><br></pre></td></tr></table></figure></p><p>   在浏览器中输入localhost:4000查看，<br>   <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img4.png" alt="img4.png"></p><h6 id="正常！"><a href="#正常！" class="headerlink" title="正常！"></a>正常！</h6><h5 id="安装Hexo-admin插件"><a href="#安装Hexo-admin插件" class="headerlink" title="安装Hexo-admin插件"></a>安装Hexo-admin插件</h5><p>   运行<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$npm install --save hexo-admin</span><br><span class="line">$hexo server -d</span><br></pre></td></tr></table></figure></p><p>   安装完后在浏览器中输入localhost:4000/admin查看<br>      <img src="/2019/01/10/利用Hexo-admin插件管理Hexo博客/img5.png" alt="img5.png"></p><p> Post：博客文章列表<br> Pages：页面管理<br>About：admin插件说明<br> hexo-gen：关键节点<br>Settings: 配置</p><p>在post页面就可以使用MarkDown语法写博客了。当然，多媒体文件的插入也完全遵循MarkDown语法。<br><br>关于MarkDown语法的使用：<a href="https://blog.csdn.net/m0_37925202/article/details/80461714" target="_blank" rel="noopener">MarkDown语法进阶</a></p><h5 id="最后，本地写完后不要忘记提交"><a href="#最后，本地写完后不要忘记提交" class="headerlink" title="最后，本地写完后不要忘记提交"></a>最后，本地写完后不要忘记提交</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;成功用github+hexo搭建好个人博客之后，找一个自己喜欢的主题运用到自己的博客中：&lt;/p&gt;
&lt;h5 id=&quot;挑个好看的主题&quot;&gt;&lt;a href=&quot;#挑个好看的主题&quot; class=&quot;headerlink&quot; title=&quot;挑个好看的主题&quot;&gt;&lt;/a&gt;挑个好看的主题&lt;/h5&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="http://phewww.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hexo-admin" scheme="http://phewww.top/tags/Hexo-admin/"/>
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建自己的博客</title>
    <link href="http://phewww.top/2019/01/06/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://phewww.top/2019/01/06/用Github-Hexo搭建自己的博客/</id>
    <published>2019-01-06T08:03:00.000Z</published>
    <updated>2019-03-14T03:58:56.921Z</updated>
    
    <content type="html"><![CDATA[<h5 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：<br></h5><p>1.安装Git：下载地址 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br></p><p>2.下载Node.js安装文件（64位的下载地址）：<a href="https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi</a><br></p><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：<br></h5><p>点开安装包，默认选项，一路next。</p><h5 id="检查git版本号"><a href="#检查git版本号" class="headerlink" title="检查git版本号:"></a>检查git版本号:<br></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;git --version</span><br><span class="line">git version 2.20.1.windows.1</span><br></pre></td></tr></table></figure><h5 id="检查node-js版本号"><a href="#检查node-js版本号" class="headerlink" title="检查node.js版本号:"></a>检查node.js版本号:<br></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;node -v</span><br><span class="line">v10.13.0</span><br></pre></td></tr></table></figure><h5 id="检查npm的安装"><a href="#检查npm的安装" class="headerlink" title="检查npm的安装:"></a>检查npm的安装:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\chenc&gt;npm -v</span><br><span class="line">3.10.10</span><br></pre></td></tr></table></figure><p>都没问题后，<br>到Github上注册一个账号:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br><br>注册完成后，登录你的账号，创建一个新仓库,仓库名称要与你的用户名一致<br></p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img5.png" alt="img5.png"></p><p>其它选项默认，点击Create repository 创建仓库。<br><br>创建好仓库后，在本地磁盘创建一个文件夹，比如我的叫zpc9360</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img6.png" alt="img6.png"></p><p>右键文件夹，点Git Bash ,进入：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img7.png" alt="img7.png"></p><p>然后，设置全局配置user.name 和user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;自己的Github的账号&quot;   </span><br><span class="line">git config --global user.email &quot;注册Github时的邮箱&quot;</span><br></pre></td></tr></table></figure></p><p>生成SSH密钥设置到Github(需先设置user.name和user.email)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh </span><br><span class="line">ssh-keygen -t rsa -C “注册Github时的邮箱”</span><br></pre></td></tr></table></figure></p><p>生成的ssh key在C:\Users\chenc\.ssh文件夹中，复制 id_rsa.pub文件的内容到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key </p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img8.png" alt="img8.png"></p><p>完成后测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>连接成功</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img9.png" alt="img9.png"></p><h5 id="接下来安装hexo插件"><a href="#接下来安装hexo插件" class="headerlink" title="接下来安装hexo插件"></a>接下来安装hexo插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g #安装hexo</span><br></pre></td></tr></table></figure><p>稍安勿躁，等待安装完成。</p><p>安完后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Hexo #初始化hexo</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #构建</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo sever #启动服务</span><br></pre></td></tr></table></figure><p>上面两个命令可以简写为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p><h5 id="好了，初步搭建完成"><a href="#好了，初步搭建完成" class="headerlink" title="好了，初步搭建完成"></a>好了，初步搭建完成</h5><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 访问本地项目</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img10.png" alt="img10.png"></p><h5 id="但是现在只能本地访问，我们要把它提交到GitHub上去"><a href="#但是现在只能本地访问，我们要把它提交到GitHub上去" class="headerlink" title="但是现在只能本地访问，我们要把它提交到GitHub上去"></a>但是现在只能本地访问，我们要把它提交到GitHub上去</h5><p>安装部署到github插件依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install –save hexo-deployer-git</span><br></pre></td></tr></table></figure></p><p>顺便修改下配置文件：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img11.png" alt="img11.png"></p><p>改成你的：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img12.png" alt="img12.png"></p><p>再将gitbash部署hexo到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>稍等，打开zpc9360.github.io（你输入你自己的！当然你可以映射到你自己的域名上）,会出现博客界面：</p><p><img src="/2019/01/06/用Github-Hexo搭建自己的博客/img10.png" alt="img10.png"></p><h5 id="你的博客就搭好啦！"><a href="#你的博客就搭好啦！" class="headerlink" title="你的博客就搭好啦！"></a>你的博客就搭好啦！</h5><p>但是，如何优雅的发布文章呢？怎样编辑分类和标签，加入评论模块？</p><p>模板太丑怎么换？ 怎么插入图片和多媒体文件？</p><p>且听下回，《利用Hexo-admin插件管理Hexo博客》。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;下载：&quot;&gt;&lt;a href=&quot;#下载：&quot; class=&quot;headerlink&quot; title=&quot;下载：&quot;&gt;&lt;/a&gt;下载：&lt;br&gt;&lt;/h5&gt;&lt;p&gt;1.安装Git：下载地址 &lt;a href=&quot;https://git-scm.com/download/win&quot; target
      
    
    </summary>
    
      <category term="编程" scheme="http://phewww.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="http://phewww.top/tags/Github/"/>
    
      <category term="Hexo" scheme="http://phewww.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>再见2018</title>
    <link href="http://phewww.top/2018/12/30/%E5%86%8D%E8%A7%812018/"/>
    <id>http://phewww.top/2018/12/30/再见2018/</id>
    <published>2018-12-30T10:16:00.000Z</published>
    <updated>2019-02-04T03:19:43.968Z</updated>
    
    <content type="html"><![CDATA[<p>今天是元旦假期的的第一天，2018的最后两天。<br><br>能睡到自然醒真好。<br><br>杭州今天也下雪了，终于有点冬天的感觉了。<br><br>回顾过去的2018年，给自己总结了这么几个词：<br><br>浮躁、惭愧、情商低。<br><br>情商低不是那种得罪人的低，还没有那么低。<br><br>希望别人开心，逗人笑，反而做了很多沙雕的事。<br><br>幸好周围的人足够宽容，忽略了那种刻意。<br><br>说起来惭愧。<br><br>希望2019年<br><br>戒骄戒躁，对生活抱有热情。<br><br>大可不必在意，大可不必担心<br><br>高高兴兴 开开心心<br><br>朋友们！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是元旦假期的的第一天，2018的最后两天。&lt;br&gt;&lt;br&gt;能睡到自然醒真好。&lt;br&gt;&lt;br&gt;杭州今天也下雪了，终于有点冬天的感觉了。&lt;br&gt;&lt;br&gt;回顾过去的2018年，给自己总结了这么几个词：&lt;br&gt;&lt;br&gt;浮躁、惭愧、情商低。&lt;br&gt;&lt;br&gt;情商低不是那种得罪人的低
      
    
    </summary>
    
      <category term="高高兴兴 开开心心" scheme="http://phewww.top/categories/%E9%AB%98%E9%AB%98%E5%85%B4%E5%85%B4-%E5%BC%80%E5%BC%80%E5%BF%83%E5%BF%83/"/>
    
    
      <category term="再见" scheme="http://phewww.top/tags/%E5%86%8D%E8%A7%81/"/>
    
      <category term="惭愧" scheme="http://phewww.top/tags/%E6%83%AD%E6%84%A7/"/>
    
  </entry>
  
</feed>
